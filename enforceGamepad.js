// Generated by CoffeeScript 1.6.1
var enforceGamepad,
  _this = this;

enforceGamepad = (function() {
  var __browser, __prepareflag_h, __prepareflag_v, __ua;

  __browser = void 0;

  __ua = void 0;

  __prepareflag_h = void 0;

  __prepareflag_v = void 0;

  function enforceGamepad() {
    var _this = this;
    this.__controllerProcedureDefinition = function() {
      return enforceGamepad.prototype.__controllerProcedureDefinition.apply(_this, arguments);
    };
    __ua = window.navigator.userAgent.toLowerCase();
    if (__ua.match(/.* firefox\/.*/)) {
      __browser = "firefox";
    } else if (__ua.match(/.*version\/.* safari\/.*/)) {
      __browser = "safari";
    } else if (__ua.match(/.*chrome\/.* safari\/.*/)) {
      __browser = "chrome";
    } else {
      __browser = "unknown";
    }
    this.controllers = [];
    window.addEventListener("gamepadconnected", function(e) {
      return _this.__addGamepad(e.gamepad);
    });
    window.addEventListener("gamepaddisconnected", function(e) {
      return _this.__delGamepad(e.gamepad);
    });
    this.__padsmethod = [];
    this.__controllerProcedureDefinition();
  }

  enforceGamepad.prototype.stat = function() {
    var gamepads, i, _i, _ref, _results;
    gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);
    _results = [];
    for (i = _i = 0, _ref = gamepads.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(this.controllers[i] = this.__setControllerBind(gamepads[i]));
    }
    return _results;
  };

  enforceGamepad.prototype.__addGamepad = function(gamepad) {
    gamepad.axes[2] = void 0;
    gamepad.axes[5] = void 0;
    return this.controllers[gamepad.index] = this.__setControllerBind(gamepad);
  };

  enforceGamepad.prototype.__delGamepad = function(gamepad) {
    return this.controllers[gamepad.index] = void 0;
  };

  enforceGamepad.prototype.__setControllerBind = function(c) {
    var match, method, product, vendor;
    if (c == null) {
      return;
    }
    switch (__browser) {
      case "firefox":
        match = c.id.match(/(.*?)-(.*?)-/);
        vendor = match[1];
        product = match[2];
        break;
      case "chrome":
        match = c.id.match(/.*Vendor: 0*(.*?) Product: 0*(.*?)\)/);
        vendor = match[1];
        product = match[2];
        break;
      case "safari":
        match = c.id.match(/(.*?)-(.*?)-/);
        vendor = match[1];
        product = match[2];
        break;
      default:
        vendor = "unknown";
        product = "generic";
    }
    method = __browser + "_" + vendor + "_" + product;
    if (typeof this.__padsmethod[method] === 'function') {
      return this.__padsmethod[method](c);
    } else {
      return this.__padsmethod.unknown_generic(c);
    }
  };

  enforceGamepad.prototype.__analogButtonProc = function(n, c) {
    var a, lt, ret;
    a = c.axes;
    lt = ((a[n] + 1) / 2).toFixed(2);
    if (lt !== parseFloat(0.5).toFixed(2)) {
      __prepareflag_h = true;
    }
    if (__prepareflag_h == null) {
      return ret = parseFloat(0).toFixed(2);
    } else {
      return ret = lt;
    }
  };

  enforceGamepad.prototype.__crossButtonHorizontal = function(n, c) {
    var a, an, left, right;
    a = c.axes;
    an = a[9].toFixed(1);
    if (an === "1.0" || an === "0.7" || an === "0.4") {
      left = 1;
    } else {
      left = 0;
    }
    if (an === "-0.1" || an === "-0.4" || an === "-0.7") {
      right = 1;
    } else {
      right = 0;
    }
    return right - left;
  };

  enforceGamepad.prototype.__crossButtonVertical = function(n, c) {
    var a, an, down, up;
    a = c.axes;
    an = a[n].toFixed(1);
    if (an === "1.0" || an === "-1.0" || an === "-0.7") {
      up = 1;
    } else {
      up = 0;
    }
    if (an === "-0.1" || an === "0.1" || an === "0.4") {
      down = 1;
    } else {
      down = 0;
    }
    return down - up;
  };

  enforceGamepad.prototype.__buttonLogicalc = function(n, m, c) {
    var b, ret;
    b = c.buttons;
    if (b[n].value && !b[m].value) {
      ret = [1, 0, 0];
    } else if (!b[n].value && b[m].value) {
      ret = [0, 1, 0];
    } else if (b[n].value && b[m].value) {
      ret = [0, 0, 1];
    } else {
      ret = [0, 0, 0];
    }
    return ret;
  };

  enforceGamepad.prototype.__controllerProcedureDefinition = function() {
    var _this = this;
    this.__padsmethod.firefox_45e_28e = function(c) {
      var a, b, ret;
      ret = [];
      ret.id = c.id;
      ret.buttons = [];
      ret.axes = [[], []];
      ret.analog = [[], []];
      a = c.axes;
      b = c.buttons;
      ret.buttons[0] = b[11].value;
      ret.buttons[1] = b[12].value;
      ret.buttons[2] = b[13].value;
      ret.buttons[3] = b[14].value;
      ret.buttons[4] = b[8].value;
      ret.buttons[5] = b[9].value;
      ret.buttons[6] = _this.__analogButtonProc(2, c);
      ret.buttons[7] = _this.__analogButtonProc(5, c);
      ret.buttons[8] = b[5].value;
      ret.buttons[9] = b[4].value;
      ret.buttons[10] = b[6].value;
      ret.buttons[11] = b[7].value;
      ret.buttons[12] = b[10].value;
      ret.axes[0] = b[3].value - b[2].value;
      ret.axes[1] = b[1].value - b[0].value;
      ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
      ret.analog[1] = [a[3].toFixed(2), a[4].toFixed(2)];
      return ret;
    };
    this.__padsmethod.chrome_45e_28e = function(c) {
      var a, b, ret;
      ret = [];
      ret.id = c.id;
      ret.buttons = [];
      ret.axes = [[], []];
      ret.analog = [[], []];
      a = c.axes;
      b = c.buttons;
      ret.buttons[0] = b[0].value;
      ret.buttons[1] = b[1].value;
      ret.buttons[2] = b[2].value;
      ret.buttons[3] = b[3].value;
      ret.buttons[4] = b[4].value;
      ret.buttons[5] = b[5].value;
      ret.buttons[6] = b[6].value.toFixed(2);
      ret.buttons[7] = b[7].value.toFixed(2);
      ret.buttons[8] = b[8].value;
      ret.buttons[9] = b[9].value;
      ret.buttons[10] = b[10].value;
      ret.buttons[11] = b[11].value;
      ret.buttons[12] = b[16].value;
      ret.axes[0] = b[15].value - b[14].value;
      ret.axes[1] = b[13].value - b[12].value;
      ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
      ret.analog[1] = [a[2].toFixed(2), a[3].toFixed(2)];
      return ret;
    };
    this.__padsmethod.safari_45e_28e = function(c) {
      var a, b, ret;
      ret = [];
      ret.id = c.id;
      ret.buttons = [];
      ret.axes = [[], []];
      ret.analog = [[], []];
      a = c.axes;
      b = c.buttons;
      ret.buttons[0] = b[0].value;
      ret.buttons[1] = b[1].value;
      ret.buttons[2] = b[2].value;
      ret.buttons[3] = b[3].value;
      ret.buttons[4] = b[4].value;
      ret.buttons[5] = b[5].value;
      ret.buttons[6] = _this.__analogButtonProc(4, c);
      ret.buttons[7] = _this.__analogButtonProc(5, c);
      ret.buttons[8] = b[9].value;
      ret.buttons[9] = b[8].value;
      ret.buttons[10] = b[6].value;
      ret.buttons[11] = b[7].value;
      ret.buttons[12] = b[10].value;
      ret.axes[0] = b[14].value - b[13].value;
      ret.axes[1] = b[12].value - b[11].value;
      ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
      ret.analog[1] = [a[2].toFixed(2), a[3].toFixed(2)];
      return ret;
    };
    this.__padsmethod.firefox_56e_2003 = function(c) {
      var a, b, ret;
      ret = [];
      ret.id = c.id;
      ret.buttons = [];
      ret.axes = [[], []];
      ret.analog = [[], []];
      a = c.axes;
      b = c.buttons;
      ret.buttons[0] = b[2].value;
      ret.buttons[1] = b[3].value;
      ret.buttons[2] = b[0].value;
      ret.buttons[3] = b[1].value;
      ret.buttons[4] = b[4].value;
      ret.buttons[5] = b[5].value;
      ret.buttons[6] = b[6].value;
      ret.buttons[7] = b[7].value;
      ret.buttons[8] = b[10].value;
      ret.buttons[9] = b[11].value;
      ret.buttons[10] = b[8].value;
      ret.buttons[11] = b[9].value;
      ret.buttons[12] = b[12].value;
      ret.axes[0] = b[16].value - b[15].value;
      ret.axes[1] = b[14].value - b[13].value;
      ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
      ret.analog[1] = [a[2].toFixed(2), a[3].toFixed(2)];
      return ret;
    };
    this.__padsmethod.chrome_56e_2003 = function(c) {
      var a, b, ret;
      ret = [];
      ret.id = c.id;
      ret.buttons = [];
      ret.axes = [[], []];
      ret.analog = [[], []];
      a = c.axes;
      b = c.buttons;
      ret.buttons[0] = b[2].value;
      ret.buttons[1] = b[3].value;
      ret.buttons[2] = b[0].value;
      ret.buttons[3] = b[1].value;
      ret.buttons[4] = b[4].value;
      ret.buttons[5] = b[5].value;
      ret.buttons[6] = b[6].value;
      ret.buttons[7] = b[7].value;
      ret.buttons[8] = b[10].value;
      ret.buttons[9] = b[11].value;
      ret.buttons[10] = b[8].value;
      ret.buttons[11] = b[9].value;
      ret.buttons[12] = b[12].value;
      ret.axes[0] = _this.__crossButtonHorizontal(9, c);
      ret.axes[1] = _this.__crossButtonVertical(9, c);
      ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
      ret.analog[1] = [a[2].toFixed(2), a[5].toFixed(2)];
      return ret;
    };
    this.__padsmethod.safari_56e_2003 = function(c) {
      var a, b, ret;
      ret = [];
      ret.id = c.id;
      ret.buttons = [];
      ret.axes = [[], []];
      ret.analog = [[], []];
      a = c.axes;
      b = c.buttons;
      ret.buttons[0] = b[2].value;
      ret.buttons[1] = b[3].value;
      ret.buttons[2] = b[0].value;
      ret.buttons[3] = b[1].value;
      ret.buttons[4] = b[4].value;
      ret.buttons[5] = b[5].value;
      ret.buttons[6] = b[6].value;
      ret.buttons[7] = b[7].value;
      ret.buttons[8] = b[10].value;
      ret.buttons[9] = b[11].value;
      ret.buttons[10] = b[8].value;
      ret.buttons[11] = b[9].value;
      ret.buttons[12] = b[12].value;
      ret.axes[0] = parseInt(a[0]);
      ret.axes[1] = parseInt(a[1]);
      ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
      ret.analog[1] = [a[2].toFixed(2), a[3].toFixed(2)];
      return ret;
    };
    this.__padsmethod.firefox_d9d_3013 = function(c) {
      var a, b, btn, ret;
      ret = [];
      ret.id = c.id;
      ret.buttons = [];
      ret.axes = [[], []];
      ret.analog = [[], []];
      a = c.axes;
      b = c.buttons;
      btn = _this.__buttonLogicalc(8, 9, c);
      ret.buttons[0] = b[0].value;
      ret.buttons[1] = b[1].value;
      ret.buttons[2] = b[2].value;
      ret.buttons[3] = b[3].value;
      ret.buttons[4] = b[4].value;
      ret.buttons[5] = b[6].value;
      ret.buttons[6] = b[5].value;
      ret.buttons[7] = b[7].value;
      ret.buttons[8] = btn[0];
      ret.buttons[9] = btn[1];
      ret.buttons[10] = b[10].value;
      ret.buttons[11] = b[11].value;
      ret.buttons[12] = btn[2];
      ret.axes[0] = b[15].value - b[14].value;
      ret.axes[1] = b[13].value - b[12].value;
      ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
      ret.analog[1] = [a[2].toFixed(2), a[3].toFixed(2)];
      return ret;
    };
    this.__padsmethod.chrome_d9d_3013 = function(c) {
      var a, b, btn, ret;
      ret = [];
      ret.id = c.id;
      ret.buttons = [];
      ret.axes = [[], []];
      ret.analog = [[], []];
      a = c.axes;
      b = c.buttons;
      btn = _this.__buttonLogicalc(8, 9, c);
      ret.buttons[0] = b[0].value;
      ret.buttons[1] = b[1].value;
      ret.buttons[2] = b[2].value;
      ret.buttons[3] = b[3].value;
      ret.buttons[4] = b[4].value;
      ret.buttons[5] = b[6].value;
      ret.buttons[6] = b[5].value;
      ret.buttons[7] = b[7].value;
      ret.buttons[8] = btn[0];
      ret.buttons[9] = btn[1];
      ret.buttons[10] = b[10].value;
      ret.buttons[11] = b[11].value;
      ret.buttons[12] = btn[2];
      ret.axes[0] = _this.__crossButtonHorizontal(9, c);
      ret.axes[1] = _this.__crossButtonVertical(9, c);
      ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
      ret.analog[1] = [a[2].toFixed(2), a[5].toFixed(2)];
      return ret;
    };
    this.__padsmethod.safari_d9d_3013 = function(c) {
      var a, b, btn, ret;
      ret = [];
      ret.id = c.id;
      ret.buttons = [];
      ret.axes = [[], []];
      ret.analog = [[], []];
      a = c.axes;
      b = c.buttons;
      btn = _this.__buttonLogicalc(8, 9, c);
      ret.buttons[0] = b[0].value;
      ret.buttons[1] = b[1].value;
      ret.buttons[2] = b[2].value;
      ret.buttons[3] = b[3].value;
      ret.buttons[4] = b[4].value;
      ret.buttons[5] = b[6].value;
      ret.buttons[6] = b[5].value;
      ret.buttons[7] = b[7].value;
      ret.buttons[8] = btn[0];
      ret.buttons[9] = btn[1];
      ret.buttons[10] = b[10].value;
      ret.buttons[11] = b[11].value;
      ret.buttons[12] = btn[2];
      ret.axes[0] = parseInt(a[2]);
      ret.axes[1] = parseInt(a[3]);
      ret.analog[0] = [a[2].toFixed(2), a[3].toFixed(2)];
      ret.analog[1] = [a[1].toFixed(2), a[0].toFixed(2)];
      return ret;
    };
    this.__padsmethod.firefox_1dd8_10 = function(c) {
      var a, b, btn, ret;
      ret = [];
      ret.id = c.id;
      ret.buttons = [];
      ret.axes = [[], []];
      ret.analog = [[], []];
      a = c.axes;
      b = c.buttons;
      btn = _this.__buttonLogicalc(8, 9, c);
      ret.buttons[0] = b[2].value;
      ret.buttons[1] = b[1].value;
      ret.buttons[2] = b[3].value;
      ret.buttons[3] = b[0].value;
      ret.buttons[4] = b[6].value;
      ret.buttons[5] = b[7].value;
      ret.buttons[6] = b[4].value;
      ret.buttons[7] = b[5].value;
      ret.buttons[8] = btn[0];
      ret.buttons[9] = btn[1];
      ret.buttons[10] = b[10].value;
      ret.buttons[11] = b[11].value;
      ret.buttons[12] = btn[2];
      ret.axes[0] = b[16].value - b[15].value;
      ret.axes[1] = b[14].value - b[13].value;
      ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
      ret.analog[1] = [a[2].toFixed(2), a[3].toFixed(2)];
      return ret;
    };
    this.__padsmethod.chrome_1dd8_10 = function(c) {
      var a, b, btn, ret;
      ret = [];
      ret.id = c.id;
      ret.buttons = [];
      ret.axes = [[], []];
      ret.analog = [[], []];
      a = c.axes;
      b = c.buttons;
      btn = _this.__buttonLogicalc(8, 9, c);
      ret.buttons[0] = b[2].value;
      ret.buttons[1] = b[1].value;
      ret.buttons[2] = b[3].value;
      ret.buttons[3] = b[0].value;
      ret.buttons[4] = b[6].value;
      ret.buttons[5] = b[7].value;
      ret.buttons[6] = b[4].value;
      ret.buttons[7] = b[5].value;
      ret.buttons[8] = btn[0];
      ret.buttons[9] = btn[1];
      ret.buttons[10] = b[10].value;
      ret.buttons[11] = b[11].value;
      ret.buttons[12] = btn[2];
      ret.axes[0] = _this.__crossButtonHorizontal(9, c);
      ret.axes[1] = _this.__crossButtonVertical(9, c);
      ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
      ret.analog[1] = [a[2].toFixed(2), a[5].toFixed(2)];
      return ret;
    };
    this.__padsmethod.safari_1dd8_10 = function(c) {
      var a, b, btn, ret;
      ret = [];
      ret.id = c.id;
      ret.buttons = [];
      ret.axes = [[], []];
      ret.analog = [[], []];
      a = c.axes;
      b = c.buttons;
      btn = _this.__buttonLogicalc(8, 9, c);
      ret.buttons[0] = b[2].value;
      ret.buttons[1] = b[1].value;
      ret.buttons[2] = b[3].value;
      ret.buttons[3] = b[0].value;
      ret.buttons[4] = b[6].value;
      ret.buttons[5] = b[7].value;
      ret.buttons[6] = b[4].value;
      ret.buttons[7] = b[5].value;
      ret.buttons[8] = btn[0];
      ret.buttons[9] = btn[1];
      ret.buttons[10] = b[10].value;
      ret.buttons[11] = b[11].value;
      ret.buttons[12] = btn[2];
      ret.axes[0] = parseInt(a[0]);
      ret.axes[1] = parseInt(a[1]);
      ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
      ret.analog[1] = [a[2].toFixed(2), a[3].toFixed(2)];
      return ret;
    };
    return this.__padsmethod.unknown_generic = function(c) {
      var a, b, btn, ret;
      ret = [];
      ret.id = c.id;
      ret.buttons = [];
      ret.axes = [[], []];
      ret.analog = [[], []];
      a = c.axes;
      b = c.buttons;
      btn = _this.__buttonLogicalc(6, 7, c);
      ret.buttons[0] = b[1].value;
      ret.buttons[1] = b[0].value;
      ret.buttons[2] = b[2].value;
      ret.buttons[3] = b[3].value;
      ret.buttons[4] = b[4].value;
      ret.buttons[5] = b[5].value;
      ret.buttons[6] = 0;
      ret.buttons[7] = 0;
      ret.buttons[8] = btn[0];
      ret.buttons[9] = btn[1];
      ret.buttons[10] = b[10].value;
      ret.buttons[11] = b[11].value;
      ret.buttons[12] = btn[2];
      ret.axes[0] = parseInt(a[0]);
      ret.axes[1] = parseInt(a[1]);
      ret.analog[0] = 0;
      ret.analog[1] = 0;
      return ret;
    };
  };

  return enforceGamepad;

})();
