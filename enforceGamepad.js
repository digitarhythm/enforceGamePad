// Generated by CoffeeScript 1.6.1
var AL_GENERIC, CR_BSGP1204P, CR_D9D_3013, CR_U3613M, CR_XBOX360_WIRED, FX_BSGP1204P, FX_D9D_3013, FX_U3613M, FX_XBOX360_WIRED, SF_BSGP1204P, SF_D9D_3013, SF_U3613M, SF_XBOX360_WIRED, enforceGamepad;

enforceGamepad = (function() {
  var __browser, __controllerID, __prepareflag_h, __prepareflag_v;

  __controllerID = ['45e.*28e', '56e.*2003', 'd9d.*3013', '1dd8.*10', '411.*c6'];

  __browser = void 0;

  __prepareflag_h = void 0;

  __prepareflag_v = void 0;

  function enforceGamepad() {
    var _browser, _ua,
      _this = this;
    _ua = window.navigator.userAgent.toLowerCase();
    if (_ua.match(/.* firefox\/.*/)) {
      __browser = "firefox";
    } else if (_ua.match(/.*version\/.* safari\/.*/)) {
      __browser = "safari";
    } else if (_ua.match(/.*chrome\/.* safari\/.*/)) {
      __browser = "chrome";
    } else {
      _browser = "unknown";
    }
    this.controllers = [];
    window.addEventListener("gamepadconnected", function(e) {
      return _this.__addGamepad(e.gamepad);
    });
    window.addEventListener("gamepaddisconnected", function(e) {
      return _this.__delGamepad(e.gamepad);
    });
  }

  enforceGamepad.prototype.stat = function() {
    var gamepads, i, _i, _ref, _results;
    gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);
    _results = [];
    for (i = _i = 0, _ref = gamepads.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(this.controllers[i] = this.__setControllerBind(gamepads[i]));
    }
    return _results;
  };

  enforceGamepad.prototype.__addGamepad = function(gamepad) {
    gamepad.axes[2] = void 0;
    gamepad.axes[5] = void 0;
    return this.controllers[gamepad.index] = this.__setControllerBind(gamepad);
  };

  enforceGamepad.prototype.__delGamepad = function(gamepad) {
    return this.controllers[gamepad.index] = void 0;
  };

  enforceGamepad.prototype.__setControllerBind = function(c) {
    var i, key, _i, _len;
    if (c == null) {
      return;
    }
    for (i = _i = 0, _len = __controllerID.length; _i < _len; i = ++_i) {
      key = __controllerID[i];
      if (c.id.match(key)) {
        break;
      }
    }
    switch (__browser) {
      case "firefox":
        switch (i) {
          case 0:
            return FX_XBOX360_WIRED(c);
          case 1:
            return FX_U3613M(c);
          case 2:
            return FX_D9D_3013(c);
          case 3:
            return FX_BSGP1204P(c);
          default:
            return AL_GENERIC(c);
        }
        break;
      case "chrome":
        switch (i) {
          case 0:
            return CR_XBOX360_WIRED(c);
          case 1:
            return CR_U3613M(c);
          case 2:
            return CR_D9D_3013(c);
          case 3:
            return CR_BSGP1204P(c);
          default:
            return AL_GENERIC(c);
        }
        break;
      case "safari":
        switch (i) {
          case 0:
            return SF_XBOX360_WIRED(c);
          case 1:
            return SF_U3613M(c);
          case 2:
            return SF_D9D_3013(c);
          case 3:
            return SF_BSGP1204P(c);
          default:
            return AL_GENERIC(c);
        }
    }
  };

  return enforceGamepad;

})();

FX_XBOX360_WIRED = function(c) {
  var a, b, lt, ret, rt, __prepareflag_h, __prepareflag_v;
  ret = [];
  ret.id = c.id;
  ret.buttons = [];
  ret.axes = [[], []];
  ret.analog = [[], []];
  a = c.axes;
  b = c.buttons;
  ret.buttons[0] = b[11].value;
  ret.buttons[1] = b[12].value;
  ret.buttons[2] = b[13].value;
  ret.buttons[3] = b[14].value;
  ret.buttons[4] = b[8].value;
  ret.buttons[5] = b[9].value;
  lt = ((a[2] + 1) / 2).toFixed(2);
  if (lt !== parseFloat(0.5).toFixed(2)) {
    __prepareflag_h = true;
  }
  if (__prepareflag_h == null) {
    ret.buttons[6] = parseFloat(0).toFixed(2);
  } else {
    ret.buttons[6] = lt;
  }
  rt = ((a[5] + 1) / 2).toFixed(2);
  if (rt !== parseFloat(0.5).toFixed(2)) {
    __prepareflag_v = true;
  }
  if (__prepareflag_v == null) {
    ret.buttons[7] = parseFloat(0).toFixed(2);
  } else {
    ret.buttons[7] = rt;
  }
  ret.buttons[8] = b[5].value;
  ret.buttons[9] = b[4].value;
  ret.buttons[10] = b[6].value;
  ret.buttons[11] = b[7].value;
  ret.buttons[12] = b[10].value;
  ret.axes[0] = b[3].value - b[2].value;
  ret.axes[1] = b[1].value - b[0].value;
  ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
  ret.analog[1] = [a[3].toFixed(2), a[4].toFixed(2)];
  return ret;
};

CR_XBOX360_WIRED = function(c) {
  var a, b, ret;
  ret = [];
  ret.id = c.id;
  ret.buttons = [];
  ret.axes = [[], []];
  ret.analog = [[], []];
  a = c.axes;
  b = c.buttons;
  ret.buttons[0] = b[0].value;
  ret.buttons[1] = b[1].value;
  ret.buttons[2] = b[2].value;
  ret.buttons[3] = b[3].value;
  ret.buttons[4] = b[4].value;
  ret.buttons[5] = b[5].value;
  ret.buttons[6] = b[6].value.toFixed(2);
  ret.buttons[7] = b[7].value.toFixed(2);
  ret.buttons[8] = b[8].value;
  ret.buttons[9] = b[9].value;
  ret.buttons[10] = b[10].value;
  ret.buttons[11] = b[11].value;
  ret.buttons[12] = b[16].value;
  ret.axes[0] = b[15].value - b[14].value;
  ret.axes[1] = b[13].value - b[12].value;
  ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
  ret.analog[1] = [a[2].toFixed(2), a[3].toFixed(2)];
  return ret;
};

SF_XBOX360_WIRED = function(c) {
  var a, b, lt, ret, rt, __prepareflag_h, __prepareflag_v;
  ret = [];
  ret.id = c.id;
  ret.buttons = [];
  ret.axes = [[], []];
  ret.analog = [[], []];
  a = c.axes;
  b = c.buttons;
  ret.buttons[0] = b[0].value;
  ret.buttons[1] = b[1].value;
  ret.buttons[2] = b[2].value;
  ret.buttons[3] = b[3].value;
  ret.buttons[4] = b[4].value;
  ret.buttons[5] = b[5].value;
  lt = ((a[4] + 1) / 2).toFixed(2);
  if (lt !== parseFloat(0.5).toFixed(2)) {
    __prepareflag_h = true;
  }
  if (__prepareflag_h == null) {
    ret.buttons[6] = parseFloat(0).toFixed(2);
  } else {
    ret.buttons[6] = lt;
  }
  rt = ((a[5] + 1) / 2).toFixed(2);
  if (rt !== parseFloat(0.5).toFixed(2)) {
    __prepareflag_v = true;
  }
  if (__prepareflag_v == null) {
    ret.buttons[7] = parseFloat(0).toFixed(2);
  } else {
    ret.buttons[7] = rt;
  }
  ret.buttons[8] = b[9].value;
  ret.buttons[9] = b[8].value;
  ret.buttons[10] = b[6].value;
  ret.buttons[11] = b[7].value;
  ret.buttons[12] = b[10].value;
  ret.axes[0] = b[14].value - b[13].value;
  ret.axes[1] = b[12].value - b[11].value;
  ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
  ret.analog[1] = [a[2].toFixed(2), a[3].toFixed(2)];
  return ret;
};

FX_U3613M = function(c) {
  var a, b, ret;
  ret = [];
  ret.id = c.id;
  ret.buttons = [];
  ret.axes = [[], []];
  ret.analog = [[], []];
  a = c.axes;
  b = c.buttons;
  ret.buttons[0] = b[2].value;
  ret.buttons[1] = b[3].value;
  ret.buttons[2] = b[0].value;
  ret.buttons[3] = b[1].value;
  ret.buttons[4] = b[4].value;
  ret.buttons[5] = b[5].value;
  ret.buttons[6] = b[6].value;
  ret.buttons[7] = b[7].value;
  ret.buttons[8] = b[10].value;
  ret.buttons[9] = b[11].value;
  ret.buttons[10] = b[8].value;
  ret.buttons[11] = b[9].value;
  ret.buttons[12] = b[12].value;
  ret.axes[0] = b[16].value - b[15].value;
  ret.axes[1] = b[14].value - b[13].value;
  ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
  ret.analog[1] = [a[2].toFixed(2), a[3].toFixed(2)];
  return ret;
};

CR_U3613M = function(c) {
  var a, b, down, left, ret, right, up;
  ret = [];
  ret.id = c.id;
  ret.buttons = [];
  ret.axes = [[], []];
  ret.analog = [[], []];
  a = c.axes;
  b = c.buttons;
  ret.buttons[0] = b[2].value;
  ret.buttons[1] = b[3].value;
  ret.buttons[2] = b[0].value;
  ret.buttons[3] = b[1].value;
  ret.buttons[4] = b[4].value;
  ret.buttons[5] = b[5].value;
  ret.buttons[6] = b[6].value;
  ret.buttons[7] = b[7].value;
  ret.buttons[8] = b[10].value;
  ret.buttons[9] = b[11].value;
  ret.buttons[10] = b[8].value;
  ret.buttons[11] = b[9].value;
  ret.buttons[12] = b[12].value;
  if (a[9].toFixed(1) === "0.7") {
    left = 1;
  } else {
    left = 0;
  }
  if (a[9].toFixed(1) === "-0.4") {
    right = 1;
  } else {
    right = 0;
  }
  if (a[9].toFixed(1) === "-1.0") {
    up = 1;
  } else {
    up = 0;
  }
  if (a[9].toFixed(1) === "0.1") {
    down = 1;
  } else {
    down = 0;
  }
  ret.axes[0] = right - left;
  ret.axes[1] = down - up;
  ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
  ret.analog[1] = [a[2].toFixed(2), a[5].toFixed(2)];
  return ret;
};

SF_U3613M = function(c) {
  var a, b, down, left, ret, right, up;
  ret = [];
  ret.id = c.id;
  ret.buttons = [];
  ret.axes = [[], []];
  ret.analog = [[], []];
  a = c.axes;
  b = c.buttons;
  ret.buttons[0] = b[2].value;
  ret.buttons[1] = b[3].value;
  ret.buttons[2] = b[0].value;
  ret.buttons[3] = b[1].value;
  ret.buttons[4] = b[4].value;
  ret.buttons[5] = b[5].value;
  ret.buttons[6] = b[6].value;
  ret.buttons[7] = b[7].value;
  ret.buttons[8] = b[10].value;
  ret.buttons[9] = b[11].value;
  ret.buttons[10] = b[8].value;
  ret.buttons[11] = b[9].value;
  ret.buttons[12] = b[12].value;
  if (a[9].toFixed(1) === "0.7") {
    left = 1;
  } else {
    left = 0;
  }
  if (a[9].toFixed(1) === "-0.4") {
    right = 1;
  } else {
    right = 0;
  }
  if (a[9].toFixed(1) === "-1.0") {
    up = 1;
  } else {
    up = 0;
  }
  if (a[9].toFixed(1) === "0.1") {
    down = 1;
  } else {
    down = 0;
  }
  ret.axes[0] = right - left;
  ret.axes[1] = down - up;
  ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
  ret.analog[1] = [a[2].toFixed(2), a[5].toFixed(2)];
  return ret;
};

FX_D9D_3013 = function(c) {
  var a, b, ret;
  ret = [];
  ret.id = c.id;
  ret.buttons = [];
  ret.axes = [[], []];
  ret.analog = [[], []];
  a = c.axes;
  b = c.buttons;
  ret.buttons[0] = b[0].value;
  ret.buttons[1] = b[1].value;
  ret.buttons[2] = b[2].value;
  ret.buttons[3] = b[3].value;
  ret.buttons[4] = b[4].value;
  ret.buttons[5] = b[6].value;
  ret.buttons[6] = b[5].value;
  ret.buttons[7] = b[7].value;
  if (b[8].value && !b[9].value) {
    ret.buttons[8] = 1;
  } else {
    ret.buttons[8] = 0;
  }
  if (!b[8].value && b[9].value) {
    ret.buttons[9] = 1;
  } else {
    ret.buttons[9] = 0;
  }
  ret.buttons[10] = b[10].value;
  ret.buttons[11] = b[11].value;
  if (b[8].value && b[9].value) {
    ret.buttons[12] = 1;
  } else {
    ret.buttons[12] = 0;
  }
  ret.axes[0] = b[15].value - b[14].value;
  ret.axes[1] = b[13].value - b[12].value;
  ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
  ret.analog[1] = [a[2].toFixed(2), a[3].toFixed(2)];
  return ret;
};

CR_D9D_3013 = function(c) {
  var a, a9, b, down, left, ret, right, up;
  ret = [];
  ret.id = c.id;
  ret.buttons = [];
  ret.axes = [[], []];
  ret.analog = [[], []];
  a = c.axes;
  b = c.buttons;
  ret.buttons[0] = b[0].value;
  ret.buttons[1] = b[1].value;
  ret.buttons[2] = b[2].value;
  ret.buttons[3] = b[3].value;
  ret.buttons[4] = b[4].value;
  ret.buttons[5] = b[6].value;
  ret.buttons[6] = b[5].value;
  ret.buttons[7] = b[7].value;
  if (b[8].value && !b[9].value) {
    ret.buttons[8] = 1;
  } else {
    ret.buttons[8] = 0;
  }
  if (!b[8].value && b[9].value) {
    ret.buttons[9] = 1;
  } else {
    ret.buttons[9] = 0;
  }
  ret.buttons[10] = b[10].value;
  ret.buttons[11] = b[11].value;
  if (b[8].value && b[9].value) {
    ret.buttons[12] = 1;
  } else {
    ret.buttons[12] = 0;
  }
  a9 = a[9].toFixed(1);
  if (a9 === "0.4" || a9 === "0.7" || a9 === "1.0") {
    left = 1;
  } else {
    left = 0;
  }
  if (a9 === "-0.1" || a9 === "-0.4" || a9 === "-0.7") {
    right = 1;
  } else {
    right = 0;
  }
  if (a9 === "1.0" || a9 === "-1.0" || a9 === "-0.7") {
    up = 1;
  } else {
    up = 0;
  }
  if (a9 === "0.4" || a9 === "0.1" || a9 === "-0.1") {
    down = 1;
  } else {
    down = 0;
  }
  ret.axes[0] = right - left;
  ret.axes[1] = down - up;
  ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
  ret.analog[1] = [a[2].toFixed(2), a[5].toFixed(2)];
  return ret;
};

SF_D9D_3013 = function(c) {
  var a, b, ret;
  ret = [];
  ret.id = c.id;
  ret.buttons = [];
  ret.axes = [[], []];
  ret.analog = [[], []];
  a = c.axes;
  b = c.buttons;
  ret.buttons[0] = b[0].value;
  ret.buttons[1] = b[1].value;
  ret.buttons[2] = b[2].value;
  ret.buttons[3] = b[3].value;
  ret.buttons[4] = b[4].value;
  ret.buttons[5] = b[6].value;
  ret.buttons[6] = b[5].value;
  ret.buttons[7] = b[7].value;
  if (b[8].value && !b[9].value) {
    ret.buttons[8] = 1;
  } else {
    ret.buttons[8] = 0;
  }
  if (!b[8].value && b[9].value) {
    ret.buttons[9] = 1;
  } else {
    ret.buttons[9] = 0;
  }
  ret.buttons[10] = b[10].value;
  ret.buttons[11] = b[11].value;
  if (b[8].value && b[9].value) {
    ret.buttons[12] = 1;
  } else {
    ret.buttons[12] = 0;
  }
  ret.axes[0] = parseInt(a[2]);
  ret.axes[1] = parseInt(a[3]);
  ret.analog[0] = [a[2].toFixed(2), a[3].toFixed(2)];
  ret.analog[1] = [a[1].toFixed(2), a[0].toFixed(2)];
  return ret;
};

FX_BSGP1204P = function(c) {
  var a, b, ret;
  ret = [];
  ret.id = c.id;
  ret.buttons = [];
  ret.axes = [[], []];
  ret.analog = [[], []];
  a = c.axes;
  b = c.buttons;
  ret.buttons[0] = b[2].value;
  ret.buttons[1] = b[1].value;
  ret.buttons[2] = b[3].value;
  ret.buttons[3] = b[0].value;
  ret.buttons[4] = b[6].value;
  ret.buttons[5] = b[7].value;
  ret.buttons[6] = b[4].value;
  ret.buttons[7] = b[5].value;
  if (b[8].value && !b[9].value) {
    ret.buttons[8] = 1;
  } else {
    ret.buttons[8] = 0;
  }
  if (!b[8].value && b[9].value) {
    ret.buttons[9] = 1;
  } else {
    ret.buttons[9] = 0;
  }
  ret.buttons[10] = b[10].value;
  ret.buttons[11] = b[11].value;
  ret.buttons[10] = b[10].value;
  ret.buttons[11] = b[11].value;
  if (b[8].value && b[9].value) {
    ret.buttons[12] = 1;
  } else {
    ret.buttons[12] = 0;
  }
  ret.axes[0] = b[16].value - b[15].value;
  ret.axes[1] = b[14].value - b[13].value;
  ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
  ret.analog[1] = [a[2].toFixed(2), a[3].toFixed(2)];
  return ret;
};

CR_BSGP1204P = function(c) {
  var a, b, down, left, ret, right, up;
  ret = [];
  ret.id = c.id;
  ret.buttons = [];
  ret.axes = [[], []];
  ret.analog = [[], []];
  a = c.axes;
  b = c.buttons;
  ret.buttons[0] = b[2].value;
  ret.buttons[1] = b[1].value;
  ret.buttons[2] = b[3].value;
  ret.buttons[3] = b[0].value;
  ret.buttons[4] = b[6].value;
  ret.buttons[5] = b[7].value;
  ret.buttons[6] = b[4].value;
  ret.buttons[7] = b[5].value;
  if (b[8].value && !b[9].value) {
    ret.buttons[8] = 1;
  } else {
    ret.buttons[8] = 0;
  }
  if (!b[8].value && b[9].value) {
    ret.buttons[9] = 1;
  } else {
    ret.buttons[9] = 0;
  }
  ret.buttons[10] = b[10].value;
  ret.buttons[11] = b[11].value;
  if (b[8].value && b[9].value) {
    ret.buttons[12] = 1;
  } else {
    ret.buttons[12] = 0;
  }
  if (a[9].toFixed(1) === "0.7") {
    left = 1;
  } else {
    left = 0;
  }
  if (a[9].toFixed(1) === "-0.4") {
    right = 1;
  } else {
    right = 0;
  }
  if (a[9].toFixed(1) === "-1.0") {
    up = 1;
  } else {
    up = 0;
  }
  if (a[9].toFixed(1) === "0.1") {
    down = 1;
  } else {
    down = 0;
  }
  ret.axes[0] = right - left;
  ret.axes[1] = down - up;
  ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
  ret.analog[1] = [a[2].toFixed(2), a[5].toFixed(2)];
  return ret;
};

SF_BSGP1204P = function(c) {
  var a, b, ret;
  ret = [];
  ret.id = c.id;
  ret.buttons = [];
  ret.axes = [[], []];
  ret.analog = [[], []];
  a = c.axes;
  b = c.buttons;
  ret.buttons[0] = b[2].value;
  ret.buttons[1] = b[1].value;
  ret.buttons[2] = b[3].value;
  ret.buttons[3] = b[0].value;
  ret.buttons[4] = b[6].value;
  ret.buttons[5] = b[7].value;
  ret.buttons[6] = b[4].value;
  ret.buttons[7] = b[5].value;
  if (b[8].value && !b[9].value) {
    ret.buttons[8] = 1;
  } else {
    ret.buttons[8] = 0;
  }
  if (!b[8].value && b[9].value) {
    ret.buttons[9] = 1;
  } else {
    ret.buttons[9] = 0;
  }
  ret.buttons[10] = b[10].value;
  ret.buttons[11] = b[11].value;
  if (b[8].value && b[9].value) {
    ret.buttons[12] = 1;
  } else {
    ret.buttons[12] = 0;
  }
  ret.axes[0] = parseInt(a[0]);
  ret.axes[1] = parseInt(a[1]);
  ret.analog[0] = [a[0].toFixed(2), a[1].toFixed(2)];
  ret.analog[1] = [a[2].toFixed(2), a[3].toFixed(2)];
  return ret;
};

AL_GENERIC = function(c) {
  var a, b, ret;
  ret = [];
  ret.id = c.id;
  ret.buttons = [];
  ret.axes = [[], []];
  ret.analog = [[], []];
  a = c.axes;
  b = c.buttons;
  ret.buttons[0] = b[1].value;
  ret.buttons[1] = b[0].value;
  ret.buttons[2] = b[2].value;
  ret.buttons[3] = b[3].value;
  ret.buttons[4] = b[4].value;
  ret.buttons[5] = b[5].value;
  ret.buttons[6] = 0;
  ret.buttons[7] = 0;
  if (b[6].value && !b[7].value) {
    ret.buttons[8] = 1;
  } else {
    ret.buttons[8] = 0;
  }
  if (!b[6].value && b[7].value) {
    ret.buttons[9] = 1;
  } else {
    ret.buttons[9] = 0;
  }
  ret.buttons[10] = 0;
  ret.buttons[11] = 0;
  if (b[6].value && b[7].value) {
    ret.buttons[12] = 1;
  } else {
    ret.buttons[12] = 0;
  }
  ret.axes[0] = parseInt(a[0]);
  ret.axes[1] = parseInt(a[1]);
  ret.analog[0] = 0;
  ret.analog[1] = 0;
  return ret;
};
